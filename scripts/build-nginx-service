#!/usr/bin/env python

from tyr.clusters.nginx import NginxCluster
from tyr.helpers import data_file
import logging

log = logging.getLogger('Tyr.Utilities.BuildNginxService')
if not log.handlers:
    log.setLevel(logging.DEBUG)
    ch = logging.StreamHandler()
    ch.setLevel(logging.DEBUG)
    formatter = logging.Formatter(
            '%(asctime)s [%(name)s] %(levelname)s: %(message)s',
            datefmt='%H:%M:%S')
    ch.setFormatter(formatter)
    log.addHandler(ch)

def build_nginx_service(
        environment='stage',
        group='recruit',
        ami='ami-a4827dc9',
        availability_zones=['us-east-1c', 'us-east-1d'],
        instance_type='m3.medium',
        desired=0,
        max=1,
        min=0,
        health_check_grace_period=900,
        default_cooldown=900):

    region = 'us-east-1'
    # prod_subnet_ids=['subnet-e7156e90', 'subnet-f42eb1ad', 'subnet-bfe16094'],

    tags = list()
    tags.append({'name':'Environment', 'value':environment})
    tags.append({'name':'Group', 'value':group})

    NginxCluster(ami=ami,
                region=region, 
                environment=environment,
                group=group,
                desired_capacity=desired,
                instance_type=instance_type,
                tags=tags,
                # subnet_ids=prod_subnet_ids,
                root_volume_size=20,
                availability_zones=availability_zones,
                max_size=max,
                min_size=min,
                health_check_grace_period=health_check_grace_period,
                default_cooldown=default_cooldown).autorun()


if __name__ == '__main__':
    build_nginx_service()    
